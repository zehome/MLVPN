[general]
# Script called by mlvpn on network event (tunnel up/down, link failure etc)
# This command will be called as root.
statuscommand = "@sysconfdir@/mlvpn/mlvpn_updown.sh"

# Tunnel mode
# "server" will listen for connections
# "client" will just connect to "remotehost/remoteport"
mode = "client"

# Interface configuration
# IPv4 address of the tunnel on the local side (don't forget the cidr mask)
#ip4 = "10.42.43.1/30"
# IPv6 address of the tunnel on the local side (don't forget the cidr mask)
#ip6 = "fec0::1/10"
# IPv4 address of the remote side (without mask this time)
#ip4_gateway = "10.42.43.2"
# IPv6 address of the remote side (without mask this time)
#ip6_gateway = "fec0::2"
# IPv4 routes to add when the tunnel is up
#ip4_routes = "192.168.0.0/24 192.168.1.0/24"
# IPv6 routes to add when the tunnel is up
#ip6_routes = ""

# MTU must be set properly, mlvpn generates a total of 48 bytes of overhead.
# You should *NEVER* set the MTU to more than 1452 bytes.
# If you are running behind PPPoE you'll need to substract another 8 bytes.
# Absolute maximum MTU: 1452
# MTU with PPPoE in the path: 1444
mtu = 1444

# Tuntap type
# "tun" provides better performance as encapsulation
# overhead will be less than "tap". This is layer 3 IP tunnel.
# "tap" provides ethernet layer2 tunnel.
tuntap = "tun"

# Sets the tunnel interface name (LINUX only)
interface_name = "mlvpn0"

# After "timeout" seconds of inactivity, the link will be considered
# dead and will be disconnected.
timeout = 30

password = "pleasechangeme!"
# if cleartext_data is set to 1, then session data (auth)
# will still be encrypted, but all data packets will NOT.
# use this setting only when you can't do otherwise (for performance reasons).
cleartext_data = 0

# Remote control can be setup on UNIX socket
# and TCP / HTTP protocol.
# remote control will output statistics only at the moment.
# You can visualise statistics using the www/ templates.
# RAW json stream available on http://[control_bind_host]:[control_bind_port]/status
# Edit www/js/mlvpn.js url to point to your mlvpn status URL.
#control_unix_path = "@localstatedir@/run/mlvpn.sock"
#control_bind_host = "0.0.0.0"
#control_bind_port = "1040"

# Reordering
# reorder_buffer_size corresponds to a number of packets mlvpn should hold
# in case you want to enable re-ordering system.
# Don't put insane values, 64 is usually sufficient for most DSL links.
# reorder_buffer_size is 0 (disabled) by default.
#reorder_buffer_size = 64

# Loss tolerence
# Defines the maximum loss ratio accepted before the link affected is being
# considered too lossy and removed from agregation.
# This value is expressed in percent.
#loss_tolerence = 10

# Latency tolerence
# Defines the maximum latency accepted before the link affected is being
# considered too slow and removed from agregation.
# This value is expressed in milliseconds.
#latency_tolerence = 10

# Filtering system
# when MLVPN is configured to balance traffic across multiple links
# It may be required to force some traffic (VoIP) through a specific
# interface. No reordering or load balancing will be applied on thoses
# packets.
#
# The variables inside the block will define the interface your filter
# will be routed to.
# Filters are EXCLUSIVE FIRST MATCH. That means if a packet matches
# an expression and the interface is ready to receive data,
# filtering STOPS and the packet is sent.
# Filters are pcap-filter(7). Like tcpdump. (man 7 pcap-filter)

#[filters]
#dsl1 = ip proto icmp
#airlink = ip proto icmp

[dsl1]
bindhost = "0.0.0.0"
bindport = 5080
# FreeBSD/OpenBSD: send packets to specified routing table (fib)
#bindfib = 0
#remotehost = "10.2.3.4"
#remoteport = 5080
## Bandwidth of this link, in bytes/s. If not specified, each link will only
## receive as much traffic as the slowest link can handle.
#bandwidth_upload = 61440
#timeout = 25

#[airlink]
##:: to listen on any interface, any ipv6 address
#bindhost = "::"
## bindport =
#remotehost = "10.2.3.4"
#remoteport = 5081
# If it is a lossy link and we want to keep using it,
# even if 30% of packets are lost
#loss_tolerence = 30
# If it is a slow link and we want to keep using it,
# even if the SRTT is 300ms
#latency_tolerence = 300
#bandwidth_upload = 512000

#[dsl2]
##0.0.0.0 to listen on any interface, any ipv4 address
#bindhost = "0.0.0.0"
#remotehost = "10.2.3.4"
#remoteport = 5082
## bandwidth_upload = 512000
## If fallback_only is set, then the tunnel will be connected
## but not used until all non-fallback tunnels are down.
#fallback_only = 1
